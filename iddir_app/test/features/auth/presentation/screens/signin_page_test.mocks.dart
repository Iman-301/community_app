// Mocks generated by Mockito 5.4.6 from annotations
// in iddir_app/test/features/auth/presentation/screens/signin_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:iddir_app/features/auth/data/models/user_model.dart' as _i7;
import 'package:iddir_app/features/auth/data/repositories/auth_repository.dart'
    as _i2;
import 'package:iddir_app/features/auth/presentation/providers/auth_provider.dart'
    as _i5;
import 'package:iddir_app/features/profile/data/models/profile_model.dart'
    as _i10;
import 'package:iddir_app/features/profile/data/repositories/profile_repository.dart'
    as _i4;
import 'package:iddir_app/features/profile/presentation/providers/profile_provider.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAsyncValue_1<T> extends _i1.SmartFake implements _i3.AsyncValue<T> {
  _FakeAsyncValue_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProfileRepository_2 extends _i1.SmartFake
    implements _i4.ProfileRepository {
  _FakeProfileRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AuthNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthNotifier extends _i1.Mock implements _i5.AuthNotifier {
  MockAuthNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeAuthRepository_0(this, Invocation.getter(#repo)),
          )
          as _i2.AuthRepository);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i6.Stream<_i3.AsyncValue<_i7.UserModel?>> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.AsyncValue<_i7.UserModel?>>.empty(),
          )
          as _i6.Stream<_i3.AsyncValue<_i7.UserModel?>>);

  @override
  _i3.AsyncValue<_i7.UserModel?> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_1<_i7.UserModel?>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.AsyncValue<_i7.UserModel?>);

  @override
  _i3.AsyncValue<_i7.UserModel?> get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakeAsyncValue_1<_i7.UserModel?>(
              this,
              Invocation.getter(#debugState),
            ),
          )
          as _i3.AsyncValue<_i7.UserModel?>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  set state(_i3.AsyncValue<_i7.UserModel?>? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> register(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#register, [data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> getMe() =>
      (super.noSuchMethod(
            Invocation.method(#getMe, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  bool updateShouldNotify(
    _i3.AsyncValue<_i7.UserModel?>? old,
    _i3.AsyncValue<_i7.UserModel?>? current,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.RemoveListener addListener(
    _i8.Listener<_i3.AsyncValue<_i7.UserModel?>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ProfileNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileNotifier extends _i1.Mock implements _i9.ProfileNotifier {
  MockProfileNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ProfileRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeProfileRepository_2(
              this,
              Invocation.getter(#repo),
            ),
          )
          as _i4.ProfileRepository);

  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);

  @override
  _i6.Stream<_i3.AsyncValue<_i10.ProfileModel?>> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i3.AsyncValue<_i10.ProfileModel?>>.empty(),
          )
          as _i6.Stream<_i3.AsyncValue<_i10.ProfileModel?>>);

  @override
  _i3.AsyncValue<_i10.ProfileModel?> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_1<_i10.ProfileModel?>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.AsyncValue<_i10.ProfileModel?>);

  @override
  _i3.AsyncValue<_i10.ProfileModel?> get debugState =>
      (super.noSuchMethod(
            Invocation.getter(#debugState),
            returnValue: _FakeAsyncValue_1<_i10.ProfileModel?>(
              this,
              Invocation.getter(#debugState),
            ),
          )
          as _i3.AsyncValue<_i10.ProfileModel?>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  set onError(_i3.ErrorListener? _onError) => super.noSuchMethod(
    Invocation.setter(#onError, _onError),
    returnValueForMissingStub: null,
  );

  @override
  set state(_i3.AsyncValue<_i10.ProfileModel?>? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> initializeProfile() =>
      (super.noSuchMethod(
            Invocation.method(#initializeProfile, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> getProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getProfile, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateProfile(Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfile, [data]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateProfilePicture(dynamic imageData) =>
      (super.noSuchMethod(
            Invocation.method(#updateProfilePicture, [imageData]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> deleteAccount() =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  bool updateShouldNotify(
    _i3.AsyncValue<_i10.ProfileModel?>? old,
    _i3.AsyncValue<_i10.ProfileModel?>? current,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [old, current]),
            returnValue: false,
          )
          as bool);

  @override
  _i3.RemoveListener addListener(
    _i8.Listener<_i3.AsyncValue<_i10.ProfileModel?>>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addListener,
              [listener],
              {#fireImmediately: fireImmediately},
            ),
            returnValue: () {},
          )
          as _i3.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
